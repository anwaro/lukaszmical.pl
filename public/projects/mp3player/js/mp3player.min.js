(CanvasRenderingContext2D.prototype.loadConfig = function (e) {
    for (let t in e) e.hasOwnProperty(t) && t in this && (this[t] = e[t]);
}),
    (CanvasRenderingContext2D.prototype.strokeLine = function (e, t, n) {
        this.beginPath(), this.loadConfig(t || {}), this.moveTo(e[0][0], e[0][1]);
        for (let t = 0; t < e.length; t++) this.lineTo(e[t][0], e[t][1]);
        n && this.lineTo(e[0][0], e[0][1]), this.stroke();
    }),
    (CanvasRenderingContext2D.prototype.fillArea = function (e, t) {
        this.beginPath(), this.loadConfig(t || {}), this.moveTo(e[0][0], e[0][1]);
        for (let t = 0; t < e.length; t++) this.lineTo(e[t][0], e[t][1]);
        this.lineTo(e[0][0], e[0][1]), this.fill();
    }),
    (mp3player = new (function () {
        let e, t;
        const n = 169,
            i = 262;
        let o;
        const r = {
                topBg: '#32312F',
                main: '#191919',
                progressArea: 'rgba(48, 48, 41, 0.8)',
                progressBg: '#FFFFF',
                progress: '#1665BE',
                buffer: '#C3C3C3',
                font: '#FFFFFF',
                top: '#FFFFFF',
                spin: '#FFFFFF',
                menu: 'rgba(3, 3, 3, 0.8)',
                select: '#1665BE',
                vis: {
                    grad: null,
                    c1: 'rgba(0, 0, 0, 0.7)',
                    c2: 'rgba(255, 0, 0, 0.7)',
                    c3: 'rgba(0, 128, 0, 0.7)',
                    c4: 'rgba(0, 0, 255, 0.7)',
                },
            },
            l = {
                data: [],
                buffer: !1,
                play: !1,
                type: '.mp3',
                audio: {prev: new F(), current: new F(), next: new F()},
                url: {
                    info: '/api/v1/projects/songs',
                    audio: '/projects/mp3player/sound/',
                    cover: '/projects/mp3player/covers/',
                },
                vis: {support: !1, source: null, analyser: null},
            },
            u = {down: !1, downTime: null},
            a = {
                menu: {
                    el: null,
                    open: !1,
                    maxH: 198,
                    height: 0,
                    list: null,
                    select: 0,
                },
                next: null,
                prev: null,
                play: null,
                vol: {up: null, down: null},
            };
        function s(e) {
            l.audio.current.elem.volume + e > 0 &&
                l.audio.current.elem.volume + e < 1 &&
                (l.audio.current.elem.volume += e);
        }
        function c() {
            a.menu.open && !a.menu.close
                ? ((l.play = !1),
                  l.audio.current.elem.pause(),
                  (l.audio.current.id = a.menu.select),
                  C(l.audio.current, 0),
                  C(l.audio.prev, -1),
                  C(l.audio.next, 1),
                  (a.menu.close = !0),
                  c())
                : l.play
                  ? ((l.play = !1), l.audio.current.elem.pause())
                  : 'function' == typeof l.audio.current.elem.play
                    ? ((l.play = !0), l.audio.current.elem.play())
                    : setTimeout(c, 100);
        }
        function d() {
            (l.play = !1), l.audio.current.elem.pause();
        }
        function m() {
            a.menu.open
                ? (a.menu.close = !0)
                : ((a.menu.select = l.audio.current.id), f(), (a.menu.open = !0));
        }
        function f() {
            a.menu.list = [];
            for (let e = a.menu.select - 5; e < a.menu.select + 5; e++)
                a.menu.list.push(p(e));
            a.menu.list.reverse();
        }
        function p(e) {
            return (
                e < 0 && (e += l.data.length),
                e >= l.data.length && (e -= l.data.length),
                [e, l.data[e]]
            );
        }
        function g() {
            t.beginPath(),
                (t.fillStyle = r.main),
                t.clearRect(0, 14, n, i),
                (function () {
                    let e = !1;
                    if (
                        l.audio.current.image.complete &&
                        l.audio.current.image.src
                    ) {
                        const o = (l.audio.current.image.width - n) / 2;
                        try {
                            t.drawImage(
                                l.audio.current.image,
                                o,
                                0,
                                n,
                                i,
                                0,
                                14,
                                n,
                                248,
                            );
                        } catch (t) {
                            e = !0;
                        }
                    } else e = !0;
                    if (!l.buffer || e) {
                        const e = (new Date().getTime() / 250) % (2 * Math.PI);
                        t.save(),
                            t.beginPath(),
                            (t.lineWidth = 2),
                            t.translate(84.5, 131),
                            (t.strokeStyle = r.spin),
                            t.arc(0, 0, 40, e, e + 0.7 * Math.PI),
                            t.stroke(),
                            t.restore();
                    }
                })(),
                (function () {
                    t.beginPath(),
                        (t.fillStyle = r.topBg),
                        t.fillRect(0, 0, n, 14),
                        (o = new Date()),
                        t.loadConfig({
                            font: 'bold 10px Arial',
                            textAlign: 'center',
                            textBaseline: 'top',
                            fillStyle: r.font,
                        }),
                        t.fillText(
                            (function (e) {
                                let t = e.getHours(),
                                    n = e.getMinutes();
                                const i = t >= 12 ? 'PM' : 'AM';
                                return (
                                    (t %= 12),
                                    (t = t || 12),
                                    (n = n < 10 ? '0' + n : n),
                                    t + ':' + n + ' ' + i
                                );
                            })(o),
                            84.5,
                            2,
                        ),
                        t.strokeLine(
                            [
                                [147, 7],
                                [164, 7],
                            ],
                            {strokeStyle: r.top, lineWidth: 8},
                        ),
                        t.strokeLine(
                            [
                                [163, 7],
                                [166, 7],
                            ],
                            {strokeStyle: r.top, lineWidth: 4},
                        ),
                        l.play
                            ? t.fillArea(
                                  [
                                      [134, 3],
                                      [134, 11],
                                      [142, 7],
                                  ],
                                  {lineWidth: 4},
                              )
                            : (t.strokeLine(
                                  [
                                      [134, 3],
                                      [134, 11],
                                  ],
                                  {lineWidth: 2},
                              ),
                              t.strokeLine(
                                  [
                                      [139, 3],
                                      [139, 11],
                                  ],
                                  {lineWidth: 2},
                              ));
                    t.fillArea(
                        [
                            [4, 6],
                            [4, 8],
                            [7, 10],
                            [7, 4],
                        ],
                        {},
                    );
                    const e = (30 / 180) * Math.PI;
                    for (let n = 0; n < 4; n++)
                        t.beginPath(),
                            (t.lineWidth = 1),
                            t.arc(2 + n, 7, 6 + n, -e, e),
                            t.stroke();
                    (t.font = '9px Arial'),
                        (t.textAlign = 'left'),
                        t.fillText(
                            100 * l.audio.current.elem.volume.toFixed(2) + ' %',
                            17,
                            2,
                        );
                })(),
                (function () {
                    t.beginPath(),
                        (t.fillStyle = r.progressArea),
                        t.fillRect(0, 212, n, 50),
                        t.loadConfig({
                            font: 'bold 10px Arial',
                            textAlign: 'center',
                            textBaseline: 'top',
                            fillStyle: r.font,
                        }),
                        t.fillText(l.audio.current.artist, 84.5, 218),
                        (t.font = '9px Arial'),
                        t.fillText(l.audio.current.title, 84.5, 230);
                    const e = l.audio.current.elem.currentTime,
                        i = l.audio.current.elem.duration;
                    (t.textAlign = 'left'),
                        t.fillText(b(e), 5, 244),
                        (t.textAlign = 'right'),
                        t.fillText('-' + b(i - e), 164, 244);
                    const o = (e / i) * 109;
                    let u = o + 1;
                    try {
                        u = (l.audio.current.elem.buffered.end(0) / i) * 109;
                    } catch (e) {}
                    t.strokeLine(
                        [
                            [30, 250],
                            [139, 250],
                        ],
                        {strokeStyle: r.progressBg, lineWidth: 8},
                    ),
                        t.strokeLine(
                            [
                                [30, 250],
                                [30 + u, 250],
                            ],
                            {strokeStyle: r.buffer},
                        ),
                        t.strokeLine(
                            [
                                [30, 250],
                                [30 + o, 250],
                            ],
                            {strokeStyle: r.progress},
                        );
                })(),
                a.menu.open
                    ? (function () {
                          !a.menu.close &&
                              a.menu.height < a.menu.maxH &&
                              (a.menu.height += 10);
                          if (
                              a.menu.close &&
                              ((a.menu.height -= 10), a.menu.height < 0)
                          )
                              return (
                                  (a.menu.height = 0),
                                  (a.menu.close = !1),
                                  (a.menu.open = !1),
                                  0
                              );
                          let e = 14 + a.menu.height,
                              i = 0;
                          t.fillArea(
                              [
                                  [0, 14],
                                  [n, 14],
                                  [n, e],
                                  [0, e],
                              ],
                              {fillStyle: r.menu},
                          );
                          for (; e >= 34; )
                              h(i) === a.menu.select &&
                                  t.fillArea(
                                      [
                                          [0, e],
                                          [n, e],
                                          [n, e - 20],
                                          [0, e - 20],
                                      ],
                                      {fillStyle: r.select},
                                  ),
                                  t.loadConfig({
                                      font: 'bold 9px Arial',
                                      textAlign: 'left',
                                      textBaseline: 'middle',
                                      fillStyle: r.font,
                                  }),
                                  (t.fillStyle = r.font),
                                  t.fillText(v(i), 5, e - 10),
                                  (e -= 20),
                                  i++;
                      })()
                    : l.vis.support &&
                      (function () {
                          const e = new Uint8Array(l.vis.analyser.frequencyBinCount);
                          l.vis.analyser.getByteFrequencyData(e),
                              (t.fillStyle = r.vis.grad);
                          for (let n = 0; n < 0.6 * e.length; n += 16) {
                              let i = 0;
                              for (let t = 0; t < 16; t++) i += e[n + t];
                              (i /= 16),
                                  t.fillRect(
                                      ((n / 16) * 167) / 38,
                                      212,
                                      163 / 38,
                                      0.2 * -i,
                                  );
                          }
                      })();
            const e = l.audio.current.elem.duration;
            Math.abs(e - l.audio.current.elem.currentTime) < 0.1 && w(1),
                (l.buffer = !(e > 0 && l.audio.current.elem.paused && l.play));
        }
        function h(e) {
            return a.menu.list[e][0];
        }
        function v(e) {
            const t = a.menu.list[e][1];
            return h(e) + '. ' + t.artist + ' - ' + t.title;
        }
        function y(e) {
            if (a.menu.open && !a.menu.close) {
                let t = a.menu.select + e;
                t < 0 && (t += l.data.length),
                    t >= l.data.length && (t -= l.data.length),
                    (a.menu.select = t),
                    f();
            } else
                (u.down = !0),
                    (u.downTime = new Date().getTime()),
                    setTimeout(function () {
                        T(e);
                    }, 100);
        }
        function x() {
            u.down = !1;
        }
        function w(e) {
            1 === e
                ? (d(),
                  l.audio.prev.copy(l.audio.current),
                  l.audio.current.copy(l.audio.next),
                  l.audio.next.clear(),
                  c(),
                  C(l.audio.next, 1))
                : -1 === e &&
                  (l.audio.current.elem.currentTime > 30
                      ? (d(), (l.audio.current.elem.currentTime = 0), c())
                      : (d(),
                        l.audio.next.copy(l.audio.current),
                        l.audio.current.copy(l.audio.prev),
                        l.audio.prev.clear(),
                        c(),
                        C(l.audio.prev, -1)));
        }
        function T(e) {
            u.down && new Date().getTime() - u.downTime > 1e3
                ? (e > 0
                      ? l.audio.current.elem.currentTime + 1 <
                        l.audio.current.elem.duration
                          ? (l.audio.current.elem.currentTime += 1)
                          : w(1)
                      : l.audio.current.elem.currentTime - 1 > 0
                        ? (l.audio.current.elem.currentTime -= 1)
                        : w(-1),
                  setTimeout(function () {
                      T(e);
                  }, 100))
                : !u.down && new Date().getTime() - u.downTime < 1e3
                  ? w(e)
                  : u.down &&
                    setTimeout(function () {
                        T(e);
                    }, 100);
        }
        function b(e) {
            if (isNaN(e)) return '0:00';
            {
                const t = Math.floor(e / 60);
                let n = Math.floor(e % 60);
                return (n = n < 10 ? '0' + n : n), t + ':' + n;
            }
        }
        function C(e, t) {
            let n = l.audio.current.id + t;
            n < 0 && (n = l.data.length), n >= l.data.length && (n = 0);
            const i = l.data[n];
            (e.id = n),
                (e.elem.src = l.url.audio + i.src + l.type),
                (e.artist = i.artist),
                (e.title = i.title),
                (e.image.src = l.url.cover + i.cover);
        }
        function F() {
            (this.id = 0),
                (this.title = ''),
                (this.artist = ''),
                (this.elem = null),
                (this.image = new Image()),
                (this.copy = function (e) {
                    (this.id = e.id),
                        (this.title = e.title),
                        (this.artist = e.artist),
                        (this.elem.src = e.elem.src),
                        (this.image.src = e.image.src);
                }),
                (this.clear = function () {
                    (this.id = 0),
                        (this.src = ''),
                        (this.title = ''),
                        (this.artist = ''),
                        (this.image = new Image());
                });
        }
        this.init = function () {
            (e = document.getElementById('mp3screen')),
                (e.height = i),
                (e.width = n),
                e &&
                    e.getContext &&
                    ((t = e.getContext('2d')),
                    setInterval(g, 1e3 / 60),
                    (a.next = document.getElementById('next')),
                    (a.prev = document.getElementById('prev')),
                    (a.menu.el = document.getElementById('menu')),
                    (a.play = document.getElementById('play')),
                    (a.vol.up = document.getElementById('vol-up')),
                    (a.vol.down = document.getElementById('vol-down')),
                    a.next.addEventListener('mousedown', function () {
                        y(1);
                    }),
                    a.next.addEventListener('mouseup', x),
                    a.next.addEventListener('touchend', x),
                    a.prev.addEventListener('mousedown', function () {
                        y(-1);
                    }),
                    a.prev.addEventListener('mouseup', x),
                    a.prev.addEventListener('touchend', x),
                    a.play.addEventListener('click', c),
                    a.menu.el.addEventListener('click', m),
                    a.vol.up.addEventListener('click', function () {
                        s(0.1);
                    }),
                    a.vol.down.addEventListener('click', function () {
                        s(-0.1);
                    }),
                    (l.audio.current.elem = document.getElementById('current-song')),
                    (l.audio.current.elem.volume = 0.5),
                    (l.audio.next.elem = document.getElementById('next-song')),
                    (l.audio.prev.elem = document.getElementById('prev-song')),
                    (function () {
                        const e = new XMLHttpRequest();
                        (e.onreadystatechange = function () {
                            var t;
                            4 === e.readyState &&
                                200 === e.status &&
                                ((t = e.responseText),
                                (l.data = JSON.parse(t)),
                                (l.audio.current.id = Math.floor(
                                    Math.random() * l.data.length,
                                )),
                                C(l.audio.current, 0),
                                C(l.audio.prev, -1),
                                C(l.audio.next, 1));
                        }),
                            e.open('GET', l.url.info),
                            e.setRequestHeader(
                                'Content-Type',
                                'application/x-www-form-urlencoded',
                            ),
                            e.send();
                    })(),
                    (function () {
                        (r.vis.grad = t.createLinearGradient(0, 162, 0, 212)),
                            r.vis.grad.addColorStop(0, r.vis.c1),
                            r.vis.grad.addColorStop(0.3, r.vis.c2),
                            r.vis.grad.addColorStop(0.6, r.vis.c3),
                            r.vis.grad.addColorStop(1, r.vis.c4),
                            (l.vis.support = !0);
                        try {
                            const e = new AudioContext();
                            (l.vis.source = e.createMediaElementSource(
                                l.audio.current.elem,
                            )),
                                (l.vis.analyser = e.createAnalyser()),
                                l.vis.source.connect(l.vis.analyser),
                                l.vis.analyser.connect(e.destination),
                                console.log(
                                    'Your browser support audioContext object',
                                );
                        } catch (e) {
                            (l.vis.support = !1),
                                console.log(
                                    "Your browser doesn't support audioContext object, equalizer will not render",
                                    e,
                                );
                        }
                    })());
        };
    })()),
    mp3player.init();
